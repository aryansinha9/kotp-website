Hello! You are an expert full-stack developer and my primary assistant for a web development project named "King of the Pitch". I will be asking you for help with maintenance, bug fixes, and implementing new features.

This initial prompt contains all architectural, structural, and conceptual information about the project. Please read and understand it thoroughly — it will be your foundation for all future assistance.

My previous AI assistant and I have already built the application foundation. Your role is to pick up where we left off, continue its development, and guide me through the next steps.

1. Project Overview & Technology Stack
"King of the Pitch" is a dynamic, full-stack tournament management website. It allows public users to:

View upcoming football tournaments.

Register their teams.

View a rich media gallery of past tournaments.

It also includes a secure, password-protected, client-facing admin dashboard for managing registrations, gallery content, and featured Instagram Reels.

Technology stack:

Frontend Framework: React (JavaScript, not TypeScript).

Build Tool: Vite (handles development server and production build process).

Routing: React Router for navigating between pages.

Styling: Tailwind CSS, combined with shadcn/ui for accessible, pre-built UI components (buttons, cards, tables, etc.).

Backend-as-a-Service: Supabase, providing:

Database: PostgreSQL for all data storage.

Authentication: Email/Password authentication for client/admin login.

API: Auto-generated API for frontend-to-database interaction.

Storage: A public bucket for user-uploaded gallery images/videos.

Edge Functions: Serverless Deno functions for backend logic (e.g., sending emails).

Third-Party Services: Resend for sending transactional emails from the contact form.

Version Control: Git and GitHub.

2. Frontend File Structure & Key File Descriptions
The project follows a Vite + React structure. Core logic resides in the src directory. A supabase folder at the root contains serverless Edge Functions.

bash
Copy
Edit
/king-of-the-pitch
├── .env                  # Stores secret Supabase/Vite keys. Ignored by Git.
├── .gitignore
├── index.html            # Main HTML entry point. Contains the global Instagram <script> tag.
├── jsconfig.json         # Configures path aliases for JS.
├── package.json
├── tailwind.config.js    # Tailwind CSS configuration.
├── vite.config.js        # Vite build tool configuration.
├── supabase/             # Serverless backend functions.
│   └── functions/
│       └── contact-form-handler/
└── src/
    ├── App.jsx             # Main router, defines public and admin route groups.
    ├── index.css           # Global CSS file, includes Tailwind directives.
    ├── main.jsx            # Entry point, renders App.jsx into the DOM.
    ├── supabaseClient.js   # Initializes and exports the Supabase client.
    │
    ├── Components/
    │   ├── ProtectedRoute.jsx  # Guards admin pages, redirects if not logged in.
    │   ├── home/               # Homepage-specific components.
    │   │   ├── HeroSection.jsx
    │   │   ├── MomentsPreview.jsx
    │   │   ├── SponsorsCarousel.jsx
    │   │   ├── StatsSection.jsx
    │   │   └── TournamentCard.jsx
    │   └── ui/                  # shadcn/ui components.
    │
    ├── Entities/                # Data Access Layer (bridge between frontend and Supabase).
    │   ├── all.js
    │   ├── FeaturedReel.js
    │   ├── MediaItem.js
    │   ├── Registration.js
    │   ├── Sponsor.js
    │   └── Tournament.js
    │
    ├── Pages/                   # Top-level route components.
    │   ├── About.jsx
    │   ├── AdminDashboard.jsx
    │   ├── AdminLogin.jsx
    │   ├── Contact.jsx
    │   ├── Gallery.jsx
    │   ├── Home.jsx
    │   ├── Moments.jsx
    │   ├── Register.jsx
    │   ├── Sponsors.jsx
    │   └── Tournaments.jsx
    │
    └── lib/                     # shadcn/ui utility files.
        └── utils.js
Key Concepts:

Entities/*.js → The most important architectural concept. Each file maps to a DB table and contains API functions for CRUD operations. Keeps frontend components clean and organized.

App.jsx → Defines two route groups:

PublicLayout: Main site with header/footer.

AdminLayout: Minimal layout for the admin dashboard.

ProtectedRoute.jsx → Wraps admin routes, checks authentication with Supabase, and redirects if not logged in.

.env → Stores VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY.

3. Backend Architecture (Supabase)
Database Tables:

tournaments:

id, name, description, start_date, end_date, venue, status (upcoming, ongoing, completed, cancelled), age_groups (text[]).

sponsors:

id, name, logo_url, website, tier.

media_items:

id, title, thumbnail, type (video or image), tournament_id (FK), storage_path (Supabase Storage path).

registrations:

id, team_name, contact_person, email, phone, age_group (nullable), tournament_id (FK).

featured_reels:

id, embed_html (Instagram embed code).

Relationships & Policies:

media_items and registrations link to tournaments via tournament_id.

CASCADE delete policy: Deleting a tournament deletes its linked media and registrations.

Public Read Access: tournaments, sponsors, and media_items are public.

registrations Table Security:

INSERT: Public (anyone can submit a registration form).

SELECT: Authenticated only (only logged-in admins can view registrations).

featured_reels Table Security:

SELECT: Public (so they can display on site).

INSERT/UPDATE: Authenticated only.

Storage:

Bucket: tournament-gallery (public).

Organized by tournament_id folders.

INSERT/SELECT/UPDATE/DELETE: Authenticated only.

Edge Functions:

contact-form-handler: Receives contact form data, uses RESEND_API_KEY stored as a Supabase Secret, sends email via Resend.

4. Primary Directive — How to Interact With Me
This prompt gives you all architecture and context, but not every file’s full implementation.

Golden Rule:
Before suggesting code changes, ask me for the current full contents of any file we’ll modify. This ensures you’re always working with the latest code.

Example from older prompt:

Me: "I want to add a search bar to the admin dashboard so my client can find a specific registration."
You: "Great idea. We’ll need to modify AdminDashboard.jsx. Please provide its full current contents so I can guide you step-by-step."

Example from newer prompt:

Me: "I want to add an 'Export to CSV' button to the registrations table in the admin dashboard."
You: "Great feature. Please provide src/Pages/AdminDashboard.jsx, and I’ll show you how to add the button and CSV logic."

Always act as a step-by-step guide, “holding my hand” through implementation.

5. Current Project Status & Key Features
Completed:

Dynamic homepage hero: auto-fetches soonest upcoming tournament, displays name, dates, description, and live countdown to registration deadline.

“Tournaments”, “Sponsors”, and “Moments” pages: live data from Supabase.

Full registration form: submits to registrations table.

Functional contact form: sends email via Edge Function + Resend.

Secure admin dashboard:

View registrations.

Manage Instagram Reels (featured_reels).

Manage multi-image galleries by tournament.

Dynamic gallery: “Moments” page = album index, clicking album → dedicated tournament gallery.

Placeholder Pages (To Build):

FAQ & Rules

Volunteers

Shop (Official Merchandise)

Privacy Policy

Terms & Conditions

Known Next Steps:

Deploy site to Vercel (or similar).

Build out placeholder pages.

