Updated Project Brief & Current Status: King of the Pitch
1. Project Overview & Technology Stack
"King of the Pitch" is a dynamic, full-stack tournament management website. It allows public users to:
View upcoming football tournaments.
Register and pay for their teams via a secure Stripe checkout.
View a rich media gallery of past tournaments.
It also includes a secure, password-protected, client-facing admin dashboard for managing registrations, gallery content, and featured Instagram Reels. The project is now live and deployed on Vercel.
Technology stack:
Frontend Framework: React (JavaScript).
Build Tool: Vite.
Routing: React Router.
Styling: Tailwind CSS, combined with shadcn/ui.
Backend-as-a-Service: Supabase, providing:
Database: PostgreSQL.
Authentication: Email/Password for admin login.
API: Auto-generated API.
Storage: A public bucket for gallery images/videos.
Edge Functions: Serverless Deno functions for backend logic.
Third-Party Services:
Stripe: For processing registration payments.
Resend: For sending transactional emails (contact form and payment confirmations).
Version Control & Deployment:
Git and GitHub: For source code management.
Vercel: For hosting and continuous deployment (CI/CD) from the main GitHub branch.
2. Frontend File Structure & Key File Descriptions
code
Code
/king-of-the-pitch
├── .env                  # Stores local secret keys. Ignored by Git.
├── .env.local            # Stores local secrets for Supabase CLI. Ignored by Git.
├── .gitignore
├── index.html            # Main HTML entry point.
├── jsconfig.json
├── package.json
├── tailwind.config.js
├── vite.config.js
├── vercel.json           # Vercel rewrite rules for client-side routing.
├── supabase/
│   └── functions/
│       ├── _shared/
│       │   └── cors.ts
│       ├── contact-form-handler/
│       ├── create-stripe-checkout/
│       └── stripe-webhook-handler/
└── src/
    ├── App.jsx
    ├── index.css
    ├── main.jsx
    ├── supabaseClient.js
    │
    ├── Components/
    │   ├── ProtectedRoute.jsx
    │   ├── home/
    │   │   ├── HeroSection.jsx
    │   │   └── ... (other home components)
    │   └── ui/
    │
    ├── Entities/
    │   ├── all.js
    │   └── ... (all entity files)
    │
    ├── Pages/
    │   ├── AdminLogin.jsx
    │   ├── Home.jsx
    │   ├── Register.jsx
    │   ├── RegistrationSuccess.jsx # New page for post-payment confirmation
    │   └── ... (all other page components)
    │
    └── lib/
Key Concepts:
Entities/*.js: The Data Access Layer, containing API functions for database operations.
App.jsx: Defines route groups for the public site and admin dashboard.
ProtectedRoute.jsx: Guards admin pages.
.env: Stores client-side safe keys: VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY, VITE_STRIPE_PUBLISHABLE_KEY.
vercel.json: Ensures that direct navigation to any sub-page (e.g., /tournaments) on the live site works correctly with React Router.
3. Backend Architecture (Supabase)
Database Tables (Updated Schema):
tournaments:
id, name, description, start_date, end_date, venue, status, age_groups (text[]).
entry_fee (numeric): The cost to register for the tournament.
registration_deadline (timestamptz): The cutoff for registrations.
hero_image_path (text): Path to a custom hero image in Supabase Storage.
max_teams, registered_teams (used for "spots left" logic).
registrations:
id, team_name, contact_person, email, phone, age_group, tournament_id (FK).
payment_status (text, default 'unpaid'): Updated to 'paid' by the webhook.
amount_paid (numeric): The final amount paid.
stripe_session_id (text): A reference to the Stripe transaction.
media_items: id, title, type (video or image), tournament_id (FK), storage_path.
sponsors: id, name, logo_url, website, tier.
featured_reels: id, embed_html.
Policies & Security:
registrations Table Security: The public cannot directly INSERT. Records are only created server-side by the trusted stripe-webhook-handler function after a successful payment is confirmed by Stripe. Only authenticated admins can SELECT registrations.
Storage:
Bucket: tournament-gallery (public).
Organization: Contains a public/ folder with subfolders for each tournament_id, and a site-assets/ folder for general images like hero backgrounds and gallery fallbacks.
Edge Functions (Updated):
contact-form-handler: Sends contact form submissions via Resend.
create-stripe-checkout: A private function called by the frontend. It receives registration data, creates a secure Stripe Checkout Session with the registration details embedded as metadata, and returns the session URL.
stripe-webhook-handler: A public endpoint that listens for the checkout.session.completed event from Stripe. It verifies the webhook signature for security, creates the final registration record in the database, and then sends a confirmation email to the user via Resend.
Secrets Management: Supabase Secrets are used for STRIPE_SECRET_KEY, SERVICE_ROLE_KEY, RESEND_API_KEY, STRIPE_WEBHOOK_SIGNING_SECRET, and the production SITE_URL.
4. Primary Directive — How to Interact With Me
This remains the same: Before suggesting code changes, I will always ask you for the current full contents of any file we’ll modify to ensure I'm always working with the latest code. I will act as a step-by-step guide through implementation.
5. Current Project Status & Key Features (Updated)
Completed:
Dynamic Homepage Hero: Auto-fetches the soonest upcoming tournament, displays a live countdown to its registration deadline, and features a dynamic background image loaded from Supabase Storage.
Dynamic Moments Preview: The homepage now features autoplaying videos (not mock images) loaded directly from Supabase Storage.
Secure, End-to-End Payment Flow: A complete team registration and payment system is implemented using Stripe and Supabase Edge Functions. The flow handles success and cancellation redirects.
Automated Confirmation Emails: After a successful payment, a confirmation email is automatically sent to the user via Resend.
Robust Gallery Covers: The main gallery page now intelligently selects an image as a cover and uses a fallback for video-only galleries, preventing broken images.
Full Admin Dashboard: The dashboard for managing registrations, media, and reels is functional.
Live Deployment: The site is live on Vercel with a CI/CD pipeline connected to the main GitHub branch.
Placeholder Pages (To Build):
FAQ & Rules
Volunteers
Shop (Official Merchandise)
Privacy Policy
Terms & Conditions
Known Next Steps:
Build out the remaining placeholder content pages.
Before accepting real payments, switch all Stripe and Resend keys from "Test/Sandbox" to "Live/Production" mode in Vercel's environment variables and Supabase Secrets.
Continue with any new features or improvements.
